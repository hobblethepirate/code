(defun xogame () 
	(setboard )
	(format t "~%Tic Tac Toe")
	(format t "~%By James Shaver")
	(format t "~%Do you prefer (0) X's or (1) O's ?")
	(setq user (READ))
	(setq starts (mod(Random 100) 2))
	;; the char and starts match if they are first, if not the computer goes.
	(if (= user 0) 
		(setq comp 1)
		(setq comp 0)))
	(setq turns 1)
	(setq badin 1)
	(loop while (= finished 0) do
			(loop while (= badin 1) do
				(printboard )
				( format t"~Choose a position to play: 1-9" )
				( setq temp turns)
				( move (read) user)
				(cond (= temp turns)
					(setq badin 1)
					(setq badin 0))
				)
        )
(defun setboard()
	(setq row0 (list -1 -1 -1))
	(setq row1 (list -1 -1 -1))
	(setq row2 (list -1 -1 -1)))
	
;; Move allows both computers and users to input a number between 1-9 that represent a position on the
;; gameboard.
;; 1  |  2  |  3
;; 4  |  5  |  6
;; 7  |  8  |  9
 (defun printboard () 
	(format t "~A | ~A | ~A~%" 
		(if(= (first row0) -1)
			1
			(if(= (first row0) 0)
				'X
				'0)) 
		(if(= (second row0) -1)
			2
			(if(= (second row0) 0)
				'X
				'0))  
		(if(= (third row0) -1)
			3
			(if(= (third row0) 0)
				'X
				'0)) )
	( format t "~___________~%" )
	( format t "~A | ~A | ~A~%" 
		(if(= (first row1) -1)
			4
			(if(= (first row1) 0)
				'X
				'0)) 
		(if(= (second row1) -1)
			5
			(if(= (second row1) 0)
				'X
				'0))  
		(if(= (third row1) -1)
			6
			(if(= (third row1) 0)
				'X
				'0)))
	( format t "~___________~%" )
	( format t "~A | ~A | ~A~%" 
		(if(= (first row2) -1)
			7
			(if(= (first row2) 0)
				'X
				'0)) 
		(if(= (second row2) -1)
			8
			(if(= (second row2) 0)
				'X
				'0))  
		(if(= (third row2) -1)
			9
			(if(= (third row2) 0)
				'X
				'0))))

(defun move(pos char)
	(case pos 
		((1) 
			(if (= (first row0) -1)
				(setf (first row0) char)
				( format t "Unable to play in position ~A" pos)))
		((2) 
			(if (= (second row0) -1)
				(setf (second row0) char)
				( format t "Unable to play in position ~A" pos)))
		((3) 
			(if (= (third row0) -1)
				(setf (third row0) char)
				( format t "Unable to play in position ~A" pos)))
		((4) 
			(if (= (first row1) -1)
				(setf (first row1) char)
				( format t "Unable to play in position ~A" pos)))
		((5) 
			(if (= (second row1) -1)
				(setf (second row1) char)
				( format t "Unable to play in position ~A" pos)))
		((6) 
			(if (= (third row1) -1)
				(setf (third row1) char)
				( format t "Unable to play in position ~A" pos)))
		((7) 
			(if (= (first row2) -1)
				(setf (first row2) char)
				( format t "Unable to play in position ~A" pos)))
		((8) 
			(if (= (second row2) -1)
				(setf (second row2) char)
				( format t "Unable to play in position ~A" pos)))
		((9) 
			(if (= (third row2) -1)
				(setf (third row2) char)
				( format t "Unable to play in position ~A" pos)))					
			))

;; The computer sees positions in the following format:			
;;2  1  2
;;1  3  1
;;2  1  2
;; If it goes first it will choose the middle. If it doesn't go first
;; it will pick the highest valued spot that prevents the user from completing
;; a game.
(defun pcturn() 
;;check board 
	(if( and (= -3(+ (first row0) (second row0) (third row0)))
			 (= -3(+ (first row1) (second row1) (third row1)))
			 (= -3(+ (first row2) (second row2) (third row2))))
				(move 5 comp) ;; Computer goes first, take the middle
				(if (and (=  turns 1)(= (second row1) -1)) ;; if the middle is not taken, take it
					(move 5 comp)
					()) 
;;make decision	
)