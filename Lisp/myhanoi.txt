(defun main ()
	(defvar *Tower-A* '(1 2 3 4 5))
	(defvar *Tower-B* ())
	(defvar *Tower-C* ())
	(defvar *Tower-D* ())
	(defvar *count* 0)
	(let ((size (length *Tower-A*)))
		(format t "Estimated moves: ~A~%" (- (expt 3 size) 1))
		(format t "~%Before: ~%")
		(print-towers)
		(format t "~%")
		(start-hanoi size 'A 'B 'C 'D)
		(format t "~%After: ~%")
		(print-towers)
		(format t "~%Total moves: ~A~%" *count*))
	(getch))
 
(defun start-hanoi (n from to intr)
	(if (> n 0)
		(progn
			(setf *count* (+ *count* 1))
			(start-hanoi (- n 1) from intr to)
			(transfer-disc from to)
			(start-hanoi (- n 1) intr to from))))
 
(defun transfer-disc (src dest)
	(if (equal src dest)
		nil
		(let ((disc nil))
			(if (equal src 'A)
				(setf disc (pop *Tower-A*)))
			(if (equal src 'B)
				(setf disc (pop *Tower-B*)))
			(if (equal src 'C)
				(setf disc (pop *Tower-C*)))
			(if (equal src 'D)
				(setf disc (pop *Tower-D*)))
			(if (equal dest 'A)
				(push disc *Tower-A*))
			(if (equal dest 'B)
				(push disc *Tower-B*))
			(if (equal dest 'C)
				(push disc *Tower-C*))
			(if (equal dest 'D)
				(push disc *Tower-D*))
			(format t "Pushed value ~A from ~A to ~A~%" disc src dest)
			(print-towers)
			(format t "~%")
			)))
 
(defun print-towers ()
	(format t "Tower A: ~A~%" (if (= (length *Tower-A*) 0) "()" (reverse *Tower-A*)))
	(format t "Tower B: ~A~%" (if (= (length *Tower-B*) 0) "()" (reverse *Tower-B*)))
	(format t "Tower C: ~A~%" (if (= (length *Tower-C*) 0) "()" (reverse *Tower-C*)))
	(format t "Tower D: ~A~%" (if (= (length *Tower-D*) 0) "()" (reverse *Tower-D*))))
 
(defun getch ()
	(format t "~%Press any char + Enter to exit... ")
	(read))